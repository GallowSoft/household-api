# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthSession {
  accessToken: String!
  expiresIn: Float!
  refreshToken: String!
  tokenType: String!
  user: AuthUser!
}

type AuthUser {
  createdAt: String
  email: String!
  emailConfirmedAt: String
  id: String!
  lastSignInAt: String
  phone: String
  phoneConfirmedAt: String
  updatedAt: String
}

input CreateInventoryItemInput {
  barcode: String
  brand: String
  category: String
  costPerUnit: Float
  currentQuantity: Float
  description: String
  expirationDate: DateTime
  maximumQuantity: Float
  minimumQuantity: Float
  name: String!
  purchaseDate: DateTime
  storageLocation: String
  unitOfMeasure: String
}

input CreateShoppingListInput {
  name: String!
  storeId: ID
}

input CreateShoppingListItemInput {
  inventoryItemId: ID!
  notes: String
  priority: Int
  quantityNeeded: Float!
  shoppingListId: ID
}

input CreateStoreInput {
  address: String
  description: String
  name: String!
  phone: String
  website: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type InventoryItem {
  barcode: String
  brand: String
  category: String
  costPerUnit: Float
  createdAt: DateTime!
  createdBy: ID
  currentQuantity: Float!
  description: String
  expirationDate: DateTime
  id: ID!
  isActive: Boolean
  maximumQuantity: Float
  minimumQuantity: Float!
  name: String!
  purchaseDate: DateTime
  storageLocation: String
  unitOfMeasure: String!
  updatedAt: DateTime!
  updatedBy: ID
}

type ItemPrice {
  createdAt: DateTime!
  id: ID!
  inventoryItem: InventoryItem
  inventoryItemId: ID!
  isCurrent: Boolean!
  lastUpdated: DateTime!
  price: Float!
  store: Store
  storeId: ID!
  unitOfMeasure: String!
}

input LoginInput {
  email: String!
  password: String!
}

input MarkPurchasedInput {
  id: ID!
  notes: String
}

type Mutation {
  createInventoryItem(input: CreateInventoryItemInput!): InventoryItem!
  createShoppingList(input: CreateShoppingListInput!): ShoppingList!
  createShoppingListItem(input: CreateShoppingListItemInput!): ShoppingListItem!
  createStore(input: CreateStoreInput!): Store!
  deleteInventoryItem(id: ID!): Boolean!
  deleteShoppingList(id: ID!): Boolean!
  deleteShoppingListItem(id: ID!): Boolean!
  deleteStore(id: ID!): Boolean!
  login(input: LoginInput!): AuthSession!
  logout: Boolean!
  markPurchased(input: MarkPurchasedInput!): ShoppingListItem!
  refreshToken(input: RefreshTokenInput!): AuthSession!
  register(input: RegisterInput!): AuthSession!
  updateInventoryItem(input: UpdateInventoryItemInput!): InventoryItem!
  updateShoppingList(input: UpdateShoppingListInput!): ShoppingList!
  updateShoppingListItem(input: UpdateShoppingListItemInput!): ShoppingListItem!
}

type Query {
  activeShoppingList: [ShoppingListItem!]!
  cheapestPricesForShoppingList: [ItemPrice!]!
  currentPricesForItem(inventoryItemId: ID!): [ItemPrice!]!
  highPriorityShoppingList: [ShoppingListItem!]!
  inventoryItem(id: ID!): InventoryItem
  inventoryItems(category: String, isActive: Boolean, lowStock: Boolean): [InventoryItem!]!
  inventoryItemsByCategory(category: String!): [InventoryItem!]!
  itemPrice(id: ID!): ItemPrice
  itemPrices(inventoryItemId: ID, isCurrent: Boolean, storeId: ID): [ItemPrice!]!
  lowStockItems: [InventoryItem!]!
  me: AuthUser!
  myInventoryItems(category: String, isActive: Boolean): [InventoryItem!]!
  myPurchasedItems(limit: Float = 20): [ShoppingListItem!]!
  myShoppingList(isPurchased: Boolean): [ShoppingListItem!]!
  recentlyAddedItems(limit: Float = 10): [ShoppingListItem!]!
  recentlyUpdatedItems(limit: Float = 10): [InventoryItem!]!
  shoppingList(isPurchased: Boolean, priority: Float, shoppingListId: ID): [ShoppingListItem!]!
  shoppingListById(id: ID!): ShoppingList
  shoppingListItem(id: ID!): ShoppingListItem
  shoppingLists(storeId: ID): [ShoppingList!]!
  store(id: ID!): Store
  stores(isActive: Boolean): [Store!]!
}

input RefreshTokenInput {
  refreshToken: String!
}

input RegisterInput {
  email: String!
  password: String!
  phone: String
}

type ShoppingList {
  createdAt: DateTime!
  createdBy: ID
  id: ID!
  items: [ShoppingListItem!]

  """Total items in this list"""
  itemsCount: Float
  name: String!
  store: Store
  storeId: ID
  updatedAt: DateTime!
  updatedBy: ID
}

type ShoppingListItem {
  createdAt: DateTime!
  createdBy: ID
  id: ID!
  inventoryItem: InventoryItem
  inventoryItemId: ID!
  isPurchased: Boolean
  notes: String
  priority: Int!
  purchasedAt: DateTime
  purchasedBy: ID
  quantityNeeded: Float!
  shoppingList: ShoppingList
  shoppingListId: ID
  updatedAt: DateTime!
  updatedBy: ID
}

type Store {
  address: String
  createdAt: String!
  createdBy: ID
  id: ID!
  isActive: Boolean
  name: String!
  phone: String
  updatedAt: String!
  updatedBy: ID
  website: String
}

input UpdateInventoryItemInput {
  barcode: String
  brand: String
  category: String
  costPerUnit: Float
  currentQuantity: Float
  description: String
  expirationDate: DateTime
  id: ID!
  isActive: Boolean
  maximumQuantity: Float
  minimumQuantity: Float
  name: String
  purchaseDate: DateTime
  storageLocation: String
  unitOfMeasure: String
}

input UpdateShoppingListInput {
  id: ID!
  name: String
  storeId: ID
}

input UpdateShoppingListItemInput {
  id: ID!
  isPurchased: Boolean
  notes: String
  priority: Int
  quantityNeeded: Float
}